//
// generates helper classes for margin, padding and border-radius
// tailwind like, but with units derived from the system
// e.g. '.mb-l-xl' = margin-bottom: $layout-xl;
//

@mixin utilities {
  $units: (
    s: (
      4xs: $spacing-4xs,
      3xs: $spacing-3xs,
      2xs: $spacing-2xs,
      xs: $spacing-xs,
      sm: $spacing-sm,
      md: $spacing-md,
      lg: $spacing-lg,
      xl: $spacing-xl,
      2xl: $spacing-2xl,
      3xl: $spacing-3xl,
    ),
    l: (
      2xs: $layout-2xs,
      xs: $layout-xs,
      sm: $layout-sm,
      md: $layout-md,
      lg: $layout-lg,
      xl: $layout-xl,
      2xl: $layout-2xl,
    )
  );
  
  @include _gen-spacers($units);
  @include _gen-border-radius(map-get($units,s));
}

@mixin _gen-border-radius($pairs) {
  @each $key, $value in $pairs {
    .b-rad-#{$key}, 
    .b-rad-#{$key}::before, 
    .b-rad-#{$key}::after {
      border-radius: $value;
    }
  }
}

@mixin _gen-spacers($units) {
  $pairs: ('auto': auto);
  @each $type, $map in $units {
    @each $unit, $v in $map {
      $pairs: map-merge($pairs, (#{$type}-#{$unit}: $v));
    }
  }

  @each $key, $value in $pairs {
    .h-#{$key} {
      height: $value;
    }

    .m-#{$key} {
      margin: $value;
    }
    .mx-#{$key} {
      margin-right: $value;
      margin-left: $value;
    }
    .my-#{$key} {
      margin-top: $value;
      margin-bottom: $value;
    }
    .mt-#{$key} {
      margin-top: $value;
    }
    .mr-#{$key} {
      margin-right: $value;
    }
    .mb-#{$key} {
      margin-bottom: $value;
    }
    .ml-#{$key} {
      margin-left: $value;
    }

    .p-#{$key} {
      padding: $value;
    }
    .px-#{$key} {
      padding-right: $value;
      padding-left: $value;
    }
    .py-#{$key} {
      padding-top: $value;
      padding-bottom: $value;
    }
    .pt-#{$key} {
      padding-top: $value;
    }
    .pr-#{$key} {
      padding-right: $value;
    }
    .pb-#{$key} {
      padding-bottom: $value;
    }
    .pl-#{$key} {
      padding-left: $value;
    }
  }
}